{"version":3,"sources":["../../src/config/passport.js"],"names":["passportJWT","JwtStrategy","Strategy","ExtractJwt","config","User","opts","jwtFromRequest","fromAuthHeaderAsBearerToken","secretOrKey","useJwt","passport","use","jwt_payload","done","findOne","where","email","then","user"],"mappings":"AAAA;;AAEA;AACA,OAAOA,WAAP,MAAwB,cAAxB;AACA,MAAMC,cAAcD,YAAYE,QAAhC;AACA,MAAMC,aAAaH,YAAYG,UAA/B;AACA,OAAOC,MAAP,MAAmB,QAAnB;;AAEA;AACA,SAASC,IAAT,QAAqB,cAArB;;AAEA;AACA,MAAMC,OAAO,EAAb;AACA;AACAA,KAAKC,cAAL,GAAsBJ,WAAWK,2BAAX,EAAtB;AACAF,KAAKG,WAAL,GAAmBL,OAAOK,WAA1B;;AAEA;;;;;AAKA,MAAMC,SAAUC,QAAD,IAAc;AAC3BA,WAASC,GAAT,CACE,IAAIX,WAAJ,CAAgBK,IAAhB,EAAsB,CAACO,WAAD,EAAcC,IAAd,KAAuB;AAC3CT,SAAKU,OAAL,CAAa,EAAEC,OAAO,EAAEC,OAAOJ,YAAYI,KAArB,EAAT,EAAb,EAAsDC,IAAtD,CAA4DC,IAAD,IAAU;AACnE,UAAIA,IAAJ,EAAU;AACR,eAAOL,KAAK,IAAL,EAAWK,IAAX,CAAP;AACD;AACD,aAAOL,KAAK,IAAL,EAAW,KAAX,CAAP;AACD,KALD;AAMD,GAPD,CADF;AAUD,CAXD;;AAaA;AACA,eAAeJ,MAAf","file":"passport.js","sourcesContent":["/** @module src/config/passport */\n\n/** Import passport jwt strategy.  */\nimport passportJWT from 'passport-jwt';\nconst JwtStrategy = passportJWT.Strategy;\nconst ExtractJwt = passportJWT.ExtractJwt;\nimport config from './keys';\n\n/** Import defined User schema from sequelize. */\nimport { User } from '../sequelize';\n\n/** Define options object to pass into JwtStrategy function. */\nconst opts = {};\n/** Get token from Authorization Header. */\nopts.jwtFromRequest = ExtractJwt.fromAuthHeaderAsBearerToken();\nopts.secretOrKey = config.secretOrKey;\n\n/**\n * Create new JwtStrategy with passport.\n * Returns the payload once authenticated.\n * @param {passport} passport\n */\nconst useJwt = (passport) => {\n  passport.use(\n    new JwtStrategy(opts, (jwt_payload, done) => {\n      User.findOne({ where: { email: jwt_payload.email } }).then((user) => {\n        if (user) {\n          return done(null, user);\n        }\n        return done(null, false);\n      });\n    })\n  );\n};\n\n/** Export the function. */\nexport default useJwt;\n"]}