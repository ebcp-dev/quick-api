{"version":3,"sources":["../../src/routes/data.js"],"names":["express","passport","router","Router","User","Data","validateDataInput","post","authenticate","session","req","res","userData","userId","user","id","uniqueData","body","errors","isValid","status","json","findOrCreate","where","defaults","spread","created","put","dataUpdate","findOne","then","data","update","returning","rowsUpdated","updatedData","catch","err","get","findAll","params","email","error","delete","dataToDelete","uniqueDataList","destroy","deleted"],"mappings":"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","file":"data.js","sourcesContent":["/** @module src/routes/data */\n\n/** Import dependencies. */\nimport express from 'express';\nimport passport from 'passport';\nconst router = express.Router();\n\n/** Import defined Job schema from sequelize. */\nimport { User, Data } from '../sequelize';\n\n/** Import validation function. */\nimport validateDataInput from '../validation/data';\n\n/** Create data route. */\nrouter.post(\n  '/',\n  passport.authenticate('jwt', { session: false }),\n  (req, res) => {\n    const userData = {\n      userId: req.user.id,\n      uniqueData: req.body.uniqueData\n    };\n    const { errors, isValid } = validateDataInput(req.body);\n    if (!isValid) {\n      return res.status(400).json(errors);\n    }\n    /** Check if data is unique. */\n    Data.findOrCreate({\n      where: { uniqueData: userData.uniqueData },\n      defaults: userData\n    }).spread((userData, created) => {\n      if (!created) {\n        /** Must have unique uniqueData. */\n        errors.uniqueData = 'uniqueData already exists.';\n        return res.status(400).json(errors);\n      } else {\n        return res.status(200).json(userData);\n      }\n    });\n  }\n);\n\n/** Update data route. */\nrouter.put(\n  '/',\n  passport.authenticate('jwt', { session: false }),\n  (req, res) => {\n    const dataUpdate = {\n      userId: req.user.id,\n      uniqueData: req.body.uniqueData\n    };\n\n    const { errors, isValid } = validateDataInput(dataUpdate);\n\n    if (!isValid) {\n      return res.status(400).json(errors);\n    }\n    /** Check if uniqueData is unique first. */\n    Data.findOne({\n      where: { uniqueData: dataUpdate.uniqueData }\n    }).then((data) => {\n      /** 400 error if already exists. */\n      if (data && data.userId !== dataUpdate.userId) {\n        errors.uniqueData = 'uniqueData already exists.';\n        return res.status(400).json(errors);\n      } else {\n        /** Update data if uniqueData is unique. */\n        Data.update(dataUpdate, {\n          returning: true,\n          where: { userId: dataUpdate.userId }\n        })\n          .then(([rowsUpdated, [updatedData]]) => {\n            return res.status(200).json(updatedData);\n          })\n          .catch((err) => {\n            return res.status(400).json(err);\n          });\n      }\n    });\n  }\n);\n\n/** Get list of data. */\nrouter.get('/all', (req, res) => {\n  Data.findAll().then((data) => {\n    return res.status(200).json(data);\n  });\n});\n\n/** Get data of current user. */\nrouter.get(\n  '/',\n  passport.authenticate('jwt', {\n    session: false\n  }),\n  (req, res) => {\n    Data.findOne({ where: { userId: req.user.id } }).then((data) => {\n      User.findOne({ where: { id: req.user.id } }).then((user) => {\n        return res.status(200).json(data);\n      });\n    });\n  }\n);\n\n/** Get data of specific user. */\nrouter.get('/:uniqueData', (req, res) => {\n  Data.findOne({ where: { uniqueData: req.params.uniqueData } }).then(\n    (data) => {\n      if (data) {\n        User.findOne({ where: { id: data.userId } }).then((user) => {\n          if (user) {\n            return res.status(200).json({ email: user.email, data });\n          }\n        });\n      } else {\n        return res.status(400).json({ error: 'No data found for this user.' });\n      }\n    }\n  );\n});\n\n/** Delete data route. */\nrouter.delete(\n  '/',\n  passport.authenticate('jwt', {\n    session: false\n  }),\n  (req, res) => {\n    let dataToDelete = req.body.uniqueDataList || [];\n    Data.destroy({\n      where: { userId: req.user.id, uniqueData: dataToDelete }\n    }).then((deleted) => {\n      if (deleted) {\n        return res.status(200).json({ deleted: true });\n      } else {\n        return res.status(400).json({ deleted: false });\n      }\n    });\n  }\n);\n\nexport default router;\n"]}