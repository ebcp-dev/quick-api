{"version":3,"sources":["../../src/routes/user.js"],"names":["express","jwt","bcrypt","passport","router","Router","User","config","validateRegisterInput","validateLoginInput","post","req","res","errors","isValid","body","status","json","newUser","email","password","genSalt","err","salt","hash","findOrCreate","where","defaults","spread","user","created","findOne","then","compare","isMatch","payload","joined","createdAt","sign","secretOrKey","expiresIn","token","success","session","get","authenticate"],"mappings":"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","file":"user.js","sourcesContent":["/** @module src/routes/user */\n\n/** Import dependencies. */\nimport express from 'express';\nimport jwt from 'jsonwebtoken';\nimport bcrypt from 'bcryptjs';\nimport passport from 'passport';\nconst router = express.Router();\n\n/** Import defined User schema from sequelize. */\nimport { User } from '../sequelize';\n\n/** Import secretOrKey option from config/keys. */\nimport config from '../config/keys';\n\n/** Import validation function. */\nimport validateRegisterInput from '../validation/register';\nimport validateLoginInput from '../validation/login';\n\n/** User signup route */\nrouter.post('/signup', (req, res) => {\n  const { errors, isValid } = validateRegisterInput(req.body);\n\n  if (!isValid) {\n    return res.status(400).json(errors);\n  }\n\n  const newUser = {\n    email: req.body.email,\n    password: req.body.password\n  };\n  // Hash password before storing into db\n  bcrypt.genSalt(10, (err, salt) => {\n    bcrypt.hash(newUser.password, salt, (err, hash) => {\n      newUser.password = hash;\n    });\n  });\n  User.findOrCreate({\n    where: { email: newUser.email },\n    defaults: newUser\n  }).spread((user, created) => {\n    if (!created) {\n      errors.email = 'Email already in use.';\n      return res.status(400).json(errors);\n    } else {\n      return res.status(200).json(user);\n    }\n  });\n});\n\n/** User sign in route. */\nrouter.post('/login', (req, res) => {\n  const { errors, isValid } = validateLoginInput(req.body);\n\n  if (!isValid) {\n    return res.status(400).json(errors);\n  }\n  /** Get input from request body. */\n  const email = req.body.email;\n  const password = req.body.password;\n\n  /** Find user by email firsts. */\n  User.findOne({ where: { email } }).then((user) => {\n    if (!user) {\n      errors.email = 'User not found.';\n      return res.status(400).json(errors);\n    }\n    /** Compare input password with hashed password. */\n    bcrypt.compare(password, user.password).then((isMatch) => {\n      if (isMatch) {\n        /** JWT payload */\n        const payload = {\n          email: user.email,\n          joined: user.createdAt\n        };\n        /** Sign the token with payload if passwords matched. */\n        jwt.sign(\n          payload,\n          config.secretOrKey,\n          { expiresIn: 3600 },\n          (err, token) => {\n            return res.status(200).json({\n              success: true,\n              session: 'Bearer ' + token\n            });\n          }\n        );\n      } else {\n        errors.password = 'Incorrect password.';\n        return res.status(400).json(errors);\n      }\n    });\n  });\n});\n\n/** Get current authenticated user route. */\nrouter.get(\n  '/current',\n  passport.authenticate('jwt', { session: false }),\n  (req, res) => {\n    return res.status(200).json(req.user);\n  }\n);\n\nexport default router;\n"]}